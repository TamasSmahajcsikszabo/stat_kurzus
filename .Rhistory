)
KL3 <- list(
"G" = c(5, 2),
"H" = c(7, 1)
)
clusters <- list(KL2, KL3)
knitr::kable(cluster_distance(clusters, all_in_table=TRUE, type="ASED")[,c(1,2)])
cluster_distance_plot(clusters, type="ASED")
knitr::kable(cluster_distance(clusters, all_in_table=TRUE, type="SED")[,c(1,2)])
library(fpc)
library(fpc)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
matching <-lapply(patterns, function(p){str_detect(names(dataset), p)} )
colindex <- c()
for (i in 1:length(names(dataset))) {
sublist <- c()
for (j in 1:3) {
index <- matching[j][[1]][[i]]
sublist <- c(sublist, index)
}
if (sum(sublist) > 0) {
colindex <- c(colindex, TRUE)
} else {
colindex <- c(colindex, FALSE)
}
}
cluster_data <- dataset[, colindex]
scaled <- scale(cluster_data)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100, summary_table=FALSE){
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  intCriteria(dataset, clust$cluster, "all")
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
if(summary_table){
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
} else {
results
}
}
trained_clusters <- k_means_eval(scaled)
trained_clusters[1]
trained_clusters[1][1]
length(trained_clusters)
length(trained_clusters[1])
length(trained_clusters[2])
trained_clusters <- k_means_eval(scaled)
internal_criteria <-  intCriteria(dataset, clust$cluster, "all")
scaled <- scale(cluster_data)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100, summary_table=FALSE){
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
if(summary_table){
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
} else {
results
}
}
trained_clusters <- k_means_eval(scaled)
trained_clusters[1]
library(fpc)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
matching <-lapply(patterns, function(p){str_detect(names(dataset), p)} )
colindex <- c()
for (i in 1:length(names(dataset))) {
sublist <- c()
for (j in 1:3) {
index <- matching[j][[1]][[i]]
sublist <- c(sublist, index)
}
if (sum(sublist) > 0) {
colindex <- c(colindex, TRUE)
} else {
colindex <- c(colindex, FALSE)
}
}
cluster_data <- dataset[, colindex]
scaled <- scale(cluster_data)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100, summary_table=FALSE){
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
if(summary_table){
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
} else {
results
}
}
trained_clusters <- k_means_eval(scaled)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
matching <-lapply(patterns, function(p){str_detect(names(dataset), p)} )
colindex <- c()
for (i in 1:length(names(dataset))) {
sublist <- c()
for (j in 1:3) {
index
trained_clusters[1]
trained_clusters[1]
trained_clusters <- k_means_eval(scaled)
trained_clusters
library(fpc)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
matching <-lapply(patterns, function(p){str_detect(names(dataset), p)} )
colindex <- c()
for (i in 1:length(names(dataset))) {
sublist <- c()
for (j in 1:3) {
index <- matching[j][[1]][[i]]
sublist <- c(sublist, index)
}
if (sum(sublist) > 0) {
colindex <- c(colindex, TRUE)
} else {
colindex <- c(colindex, FALSE)
}
}
cluster_data <- dataset[, colindex]
scaled <- scale(cluster_data)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100, summary_table=FALSE){
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
if(summary_table){
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
} else {
results
}
}
trained_clusters <- k_means_eval(scaled)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100, summary_table=FALSE){
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
if(summary_table){
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
results <- summary_df
results
} else {
results
}
}
trained_clusters <- k_means_eval(scaled)
trained_clusters[1]
trained_clusters
trained_clusters
scaled
library(fpc)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
patterns
patterns
clusters <- list(KL2, KL3)
knitr::kable(cluster_distance(clusters, all_in_table=TRUE, type="ASED")[,c(1,2)])
cluster_distance_plot(clusters, type="ASED")
suppressMessages(source("../../src/functions.R"))
suppressMessages(source("../../src/functions.R"))
suppressMessages(source("../../src/mad.R"))
suppressMessages(library(readr))
suppressMessages(library(ggrepel))
suppressMessages(library(tidyverse))
suppressMessages(library(effsize))
suppressMessages(library(AICcmodavg))
suppressMessages(library(broom))
suppressMessages(library(confreq))
suppressMessages(library(stringr))
suppressMessages(library(kableExtra))
suppressMessages(library(caret))
suppressMessages(dataset <- read_csv("../../data/data.csv"))
suppressMessages(library(AICcmodavg))
suppressMessages(library(broom))
suppressMessages(library(confreq))
suppressMessages(library(stringr))
suppressMessages(library(kableExtra))
suppressMessages(library(caret))
suppressMessages(dataset <- read_csv("../../data/data.csv"))
suppressMessages(labels <- read_csv('../../data/labels.csv'))
patterns <- c("PIK", "PMag*", "PTelj*")
matching <-lapply(patterns, function(p){str_detect(names(dataset), p)} )
colindex <- c()
for (i in 1:length(names(dataset))) {
sublist <- c()
for (j in 1:3) {
index <- matching[j][[1]][[i]]
sublist <- c(sublist, index)
}
if (sum(sublist) > 0) {
colindex <- c(colindex, TRUE)
} else {
colindex <- c(colindex, FALSE)
}
}
selected_data <- dataset[, colindex]
mute(exploration_plot(selected_data))
B <- c(5, 2, 2, 4)
C <- c(3, 3, 3, 2)
knitr::kable(distance(B, C, type="ED", all_in_table=TRUE, custom_names= c("Távolság", "Típus", "Képlet")), "latex")
KL2 <- list(
"E" = c(3, 7),
"F" = c(6, 7),
"D" = c(3, 5)
)
KL3 <- list(
"G" = c(5, 2),
"H" = c(7, 1)
)
clusters <- list(KL2, KL3)
knitr::kable(cluster_distance(clusters, all_in_table=TRUE, type="SED")[,c(1,2)])
cluster_distance_plot(clusters, type="SED")
KL2 <- list(
"E" = c(3, 7),
"F" = c(6, 7),
"D" = c(3, 5)
)
KL3 <- list(
"G" = c(5, 2),
"H" = c(7, 1)
)
clusters <- list(KL2, KL3)
knitr::kable(cluster_distance(clusters, all_in_table=TRUE, type="ASED")[,c(1,2)])
cluster_distance_plot(clusters, type="ASED")
library(fpc)
library(fpc)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
library(fpc)
library(clusterCrit)
patterns <- c("PMag*", "PTelj*")
matching <-lapply(patterns, function(p){str_detect(names(dataset), p)} )
colindex <- c()
for (i in 1:length(names(dataset))) {
sublist <- c()
for (j in 1:3) {
index <- matching[j][[1]][[i]]
sublist <- c(sublist, index)
}
if (sum(sublist) > 0) {
colindex <- c(colindex, TRUE)
} else {
colindex <- c(colindex, FALSE)
}
}
cluster_data <- dataset[, colindex]
scaled <- scale(cluster_data)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100, summary_table=FALSE){
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
if(summary_table){
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
results <- summary_df
results
} else {
results
}
}
trained_clusters <- k_means_eval(scaled)
trained_clusters[1]
trained_clusters[1]
trained_clusters[1][[1]]
trained_clusters[1][[2]]
trained_clusters[2][[2]]
trained_clusters[2]
#clustering.ch <- kmeansruns(scaled, krange = 1:10, criterion = "ch")
#clustering.asw <- kmeansruns(scaled, krange = 1:10, criterion = "asw")
#critframe <- data.frame(k = 1:10, ch = scale(clustering.ch$crit), asw = scale(clustering.asw$crit))
#critframe <- melt(critframe, id.vars = c("k"), variable.name = "measure", value.name = "score")
#ggplot(critframe, aes(x = k, y = score, color = measure)) +
#  geom_point(aes(shape = measure)) +
#  geom_line(aes(linetype = measure)) +
#  scale_x_continuous(breaks = 1:10, labels = 1:10)
trained_clusters[2]
trained_clusters <- k_means_eval(scaled, summary_table = TRUE)
trained_clusters
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
results <- summary_df
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
k=3:5
nstart=100
iter.max=100
dataset <- scaled
results <- list()
i <- 1
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
res <- list()
res[[1]] <- clust
res[[2]] <- internal_criteria
results[[i]] <- res
i <- i+1
}
results
summary_df <- tibble()
for (j in 1:length(results)) {
actual <- tibble(data.frame(results[j][[1]]$intCrit))
summary_df <- bind_rows(summary_df, actual)
}
results <- summary_df
results
actual <- tibble(data.frame(results[j][[1]]$intCrit))
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100){
results <- tibble()
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
results$clusters <- j
result <- bind_cols(results, internal_criteria)
}
results
}
trained_clusters[2]
trained_clusters
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100){
results <- tibble()
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
results$clusters <- j
results <- bind_cols(results, internal_criteria)
}
results
}
trained_clusters <- k_means_eval(scaled, summary_table = TRUE)
trained_clusters <- k_means_eval(scaled)
trained_clusters[2]
trained_clusters
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100){
results <- tibble()
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
results$clusters <- j
results <- bind_cols(results, internal_criteria)
}
results
}
trained_clusters <- k_means_eval(scaled)
trained_clusters
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
results$clusters <- j
results <- bind_cols(results, internal_criteria)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100){
results <- tibble()
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
internal_criteria$clusters <- j
results <- bind_cols(results, internal_criteria)
}
results
}
trained_clusters <- k_means_eval(scaled)
trained_clusters
View(trained_clusters)
k_means_eval <- function(dataset, k=3:5, nstart=100, iter.max=100){
results <- tibble()
for (j in k){
clust <- kmeans(dataset, j, nstart = nstart, iter.max = iter.max)
internal_criteria <-  tibble(data.frame(intCriteria(dataset, clust$cluster, "all")))
internal_criteria$clusters <- j
results <- bind_rows(results, internal_criteria)
}
results
}
trained_clusters <- k_means_eval(scaled)
trained_clusters
View(trained_clusters)
trained_clusters
names(trained_clusters)
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")])
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")] %>% dplyr::selet(clusters, .))
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")] %>% dplyr::select(clusters, .))
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")] %>% dplyr::select(clusters, .))
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")] %>% select(clusters, .))
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")] %>% select(clusters, .))
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")])
names(trained_clusters)
knitr::kable(trained_clusters[,names(trained_clusters) %in% c("clusters", "xie_beni", "point_biserial", "silhouette", "gdi24")])
?extCriteria()
trained_clusters
trained_clusters <- k_means_eval(scaled) %>%
pivot_longer(1:42, names_to = "qc", values_to="value")
trained_clusters
View(trained_clusters)
ggplot(trained_clusters) +
geom_path(aes(cluster, value)) +
facet_wrap(~qc)
ggplot(trained_clusters) +
geom_path(aes(clusters, value)) +
facet_wrap(~qc)
ggplot(trained_clusters) +
geom_bar(aes(clusters, value)) +
facet_wrap(~qc, scales="free")
ggplot(trained_clusters) +
geom_col(aes(clusters, value)) +
facet_wrap(~qc, scales="free")
ggplot(trained_clusters) +
geom_col(aes(clusters, value, fill=clusters)) +
facet_wrap(~qc, scales="free") +
scale_fill_manual(values=c("coral", "coral4", "grey60"))
trained_clusters <- k_means_eval(scaled) %>%
pivot_longer(1:42, names_to = "qc", values_to="value") %>%
mutate(clusters = as.factor(clusters))
ggplot(trained_clusters) +
geom_col(aes(clusters, value, fill=clusters)) +
facet_wrap(~qc, scales="free") +
scale_fill_manual(values=c("coral", "coral4", "grey60"))
ROPqc <- read_csv("qc.csv")
ROPqc
View(ROPqc)
ROPqc <- read_csv("qc.csv")
ROPqc <- read_csv("qc.csv", sep=";")
ROPqc <- read.table("qc.csv", sep=";")
View(ROPqc)
ROPqc <- read.table("qc.csv", sep=";", header=TRUE)
View(ROPqc)
names(ROPqc)[1] <- "k"
ROPqc
knitr::kable(ROPqc)
knitr::kable(ROPqc)
